from Bio import SeqIO
from Bio.Align import PairwiseAligner
import os

# Define the CDR regions based on IMGT numbering (example; actual residues may vary)
CDR_RANGES = {
    "CDR-H1": (26, 32),
    "CDR-H2": (52, 56),
    "CDR-H3": (95, 102),
    "CDR-L1": (24, 34),
    "CDR-L2": (50, 56),
    "CDR-L3": (89, 97),
}

def extract_sequences_from_fasta(fasta_file):
    """Extract sequences from a FASTA file."""
    sequences = {}
    for record in SeqIO.parse(fasta_file, "fasta"):
        sequences[record.id] = record.seq
    return sequences

def calculate_similarity(seq1, seq2):
    """Calculate sequence similarity using PairwiseAligner."""
    aligner = PairwiseAligner()
    alignments = aligner.align(seq1, seq2)
    best_alignment = alignments[0]
    similarity = (best_alignment.score / max(len(seq1), len(seq2))) * 100
    return similarity, best_alignment

def main():
    # Directories containing FASTA files
    fasta_directories = {
        "bound": "/mnt/clusters/grayling/data/c22111854/ResearchProject/Data/SabDab_all_structures/all_structures/fasta/bound",
        "unbound": "/mnt/clusters/grayling/data/c22111854/ResearchProject/Data/SabDab_all_structures/all_structures/fasta/unbound"
    }

    # Output file
    output_file = '/mnt/clusters/grayling/data/c22111854/ResearchProject/Data/SabDab_all_structures/all_structures/Find_closest_match_Ab_result.txt'

    # Extract sequences from all FASTA files and calculate similarities
    with open(output_file, "w") as f:
        for dir_type, dir_path in fasta_directories.items():
            for fasta_filename in os.listdir(dir_path):
                if fasta_filename.endswith(".fasta"):
                    fasta_file = os.path.join(dir_path, fasta_filename)
                    sequences = extract_sequences_from_fasta(fasta_file)
                    f.write(f"Results for {fasta_filename} ({dir_type}):\n")
                    for seq_id1, seq1 in sequences.items():
                        for seq_id2, seq2 in sequences.items():
                            if seq_id1 < seq_id2:  # Avoid redundant comparisons
                                if len(seq1) > 0 and len(seq2) > 0:  # Ensure sequences are non-empty
                                    similarity, alignment = calculate_similarity(seq1, seq2)
                                    f.write(f"Chain {seq_id1} vs Chain {seq_id2}\n")
                                    f.write(f"Similarity: {similarity:.2f}%\n")
                                    f.write(str(alignment))
                                    f.write("\n\n")
                    f.write("\n")

if __name__ == "__main__":
    main()



def parse_similarity_results(file_path):
    """Parse the similarity results from the output file."""
    results = {}
    with open(file_path, "r") as file:
        current_antibody = None
        for line in file:
            if line.startswith("Results for"):
                # Adjusted to handle different formats in names
                current_antibody = line.split()[2].strip("():").lower()
                results[current_antibody] = []
            elif "Similarity:" in line:
                similarity = float(line.split(":")[1].strip().replace("%", ""))
                results[current_antibody].append(similarity)
    return results

def find_closest_matches(results, target_antibodies):
    """Find the closest match for each target antibody."""
    closest_matches = {}
    for antibody in target_antibodies:
        antibody = antibody.lower()  # Ensure case-insensitive matching
        if antibody in results:
            closest_matches[antibody] = max(results[antibody])
        else:
            closest_matches[antibody] = None
    return closest_matches

# Rest of your script remains the same

def main():
    # Path to the output file generated by the script
    file_path = "/mnt/clusters/grayling/data/c22111854/ResearchProject/Data/SabDab_all_structures/all_structures/Find_closest_match_Ab_result.txt"

    # List of target antibodies
    target_antibodies = [
        "1a14", "1a3l", "1a4k", "1a6w", "1adq", "1ahw", "1aj7", "1axs", "1bfv", "1bj1",
        "1bql", "1c08", "1c1e", "1cbv", "1cf8", "1cfs", "1cfv", "1clz", "1cu4", "1d6v",
        "1dbj", "1dbm", "1a2y", "1a3r", "1a6v", "1acy", "1afv", "1ai1", "1ar1", "1baf",
        "1bgx", "1bog", "1bvk", "1c12", "1c5c", "1ce1", "1cfn", "1cft", "1cly", "1ct8",
        "1cz8", "1dbb", "1dbk"
    ]

    # Parse the results file
    results = parse_similarity_results(file_path)

    # Find closest matches
    closest_matches = find_closest_matches(results, target_antibodies)

    # Print the closest matches
    for antibody, similarity in closest_matches.items():
        if similarity:
            print(f"The closest match for {antibody} is with a similarity of {similarity:.2f}%")
        else:
            print(f"No match found for {antibody}")

if __name__ == "__main__":
    main()


